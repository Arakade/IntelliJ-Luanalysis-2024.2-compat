<!--
  ~ Copyright (c) 2020
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
    <id>au.com.glassechidna.luanalysis</id>
    <name>Luanalysis</name>
    <version>1.2.2</version>
    <category>Custom Languages</category>
    <description><![CDATA[
    An IDE for statically typed Lua development.<br>
    <p><a href="https://github.com/Benjamin-Dobell/IntelliJ-Luanalysis">Source Code</a></p>
    ]]></description>
    <change-notes><![CDATA[
    <strong>1.2.2</strong>
    <ul>
        <li>New "Illegal Overrides" inspection. Reports illegal member overrides when declaring a field/method on an inherited type.&lt;br />If you're overriding a method with an incompatible type (e.g. subclass `init` function with different parameters) then you should annotate the parent `init` (and child) as `@private`.</li>
        <li>Improved support for progressively adding type annotations to an existing Lua codebase. Essentially, local variables (without a declaration site assignment) and function parameters are now assumed to be of type `any`.</li>
        <li>Mouse-over documentation now supports indexed fields e.g. docs are now displayed when hovering over the `[1]` in `arr[1]`.</li>
        <li>Inspections now traverse expressions (function calls, binary operators etc.) so you'll see more specific errors within table literals in more circumstances.</li>
        <li>Many stdlib improvements/fixes (setmetatable, load* functions, getfenv, tostring, pcall, xpcall, assert & collectgarbage).</li>
        <li>Migrated stdlib to the .def.lua extension. If you're writing API types (i.e. files that are never executed) it's suggested you adopt this file extension too.</li>
        <li><a href="https://github.com/Benjamin-Dobell/IntelliJ-Luanalysis/commit/230b7fbe51999c984e991c30ed09001a4b6f2297">Formalised type widening behaviour for overridden fields</a>.</li>
        <li>Best effort type inference for the return type of invalid function calls i.e. more chance of just seeing errors at the call site, rather than all through-out a function.</li>
        <li>Special case handling for resolution of the `self` type when writing classes as closures i.e. expressions that look like `setmetatable(someTable, {__call=function() end})`. In such cases `self` type will be resolved based on the return type of `__call`.</li>
        <li>Various type inference and variance detection performance improvements.</li>
        <li>Improved handling of return types that are a union of multiple results. Rather than being flattened into a multiple result list where each component is a union during type checking, the initial structure is preserved.</li>
        <li>Ensured method override auto-completion works in more circumstances.</li>
        <li>Ensured primitives are never covariant of shapes.</li>
        <li>Made an attempt to ensure the plugin is considered <a href="https://jetbrains.org/intellij/sdk/docs/basics/plugin_structure/dynamic_plugins.html">"dynamic"</a> by IDEA.</li>
        <li>Fixed clashes between anonymous types declared at the same offer in files with the same name (in different directories or virtual file systems).</li>
        <li>Fixed several complex type rendering issues (missing brackets etc.) in the UI.</li>
        <li>Fixed a boolean operator type inference bug in the presence of variadic return types.</li>
        <li>Fixed some incorrect inspections when "Unknown type (any) is indexable" is enabled".</li>
        <li>Fixed type inference/inspections involving assignment of `nil` to a member of `table&lt;K, nil | V&gt;`</li>
        <li>Fixed "Compute constant value" intention. However, many of the cases supported seem excessive and quite impractical. As such, this intention may be simplified in a future release.</li>
        <li>Fixed type inference & inspections for shapes that recursively reference themselves in their fields.</li>
        <li>Fixed auto-complete and type resolution for fields that are written to `self` typed variables.</li>
        <li>Fixed several bugs where generic parameters declared in multiple scopes are involved in type inference.</li>
        <li>Fixed support for generic parameters referring to other generic parameters in their type constraints.<li>
        <li>Fixed occasional misreported generic parameter shadowed errors.</li>
    </ul>
    <strong>1.2.1</strong>
    <ul>
        <li>Improved return inspection handling for unions of multiple results</li>
        <li>Improved stdlib string module definitions</li>
    </ul>
    <strong>1.2.0</strong>
    <ul>
        <li><strong>Requires IntelliJ IDEA 203 (2020.3)</strong></li>
        <li><strong>Breaking:</strong> Removed unsafe assumed constructor functionality (<a href="https://github.com/Benjamin-Dobell/IntelliJ-Luanalysis/issues/12">#12</a>)</li>
        <li><strong>Lua 5.4 support:</strong> &lt;const&gt; and &lt;close&gt; local variables and corresponding immutability inspections.</li>
        <li>Removed 'Recognize global name as type' plugin option as its use encourages unsafe development practices.</li>
        <li>Added new setting "Unknown type (any) is callable" which is enabled by default. For stricter type safety it's suggested you disable this option.</li>
        <li>Added an "Illegal inheritance" inspection which will report inheritance cycles and inheritance from primitives.</li>
        <li>Substantially improved (more refined) problem annotations on deeply nested table literals (<a href="https://github.com/Benjamin-Dobell/IntelliJ-Luanalysis/issues/11">#11</a> and more.)</li>
        <li>Ensured inspections are re-run in more situations when variable types or type definitions are modified.</li>
        <li>Improved lookup performance for locally scoped types, currently just generic types.</li>
        <li>Performance improvements when dealing with types defined in the non-working file.</li>
        <li>Jump to definition behavior for fields that are members of a table, table&lt;K, V&gt; or V[].</li>
        <li>Added proper descriptions for every Luanalysis inspection.</li>
        <li>Improved mouse-over pop-up docs for table literals that will be interpreted as a shape.</li>
        <li>Only a subset of inspections are now run against files with the extension <strong>.def.lua</strong> e.g. return statement inspections are not run against functions</li>
        <li>Improved inspections for missing arguments and colon/period function calls e.g. "Missing self argument. Did you mean to call the method with a colon?"</li>
        <li>Corrected stdlib definitions for string.find()</li>
        <li>Corrected stdlib definitions for next, ipairs and pairs.</li>
        <li>Improved type safety of stdlib io module methods.</li>
        <li>Improved stdlib math.random() definition. Contributed by <a href="https://github.com/omniraptorr">Omniraptor</a></li>
        <li>Improved stdlib string.gsub() definition. Contributed by <a href="https://github.com/omniraptorr">Omniraptor</a></li>
        <li>Fixed several related bugs that could cause Luanalysis to get into a state where it was unable to recognise both user and in-built types.</li>
        <li>Fixed issue where shape inspections were appearing on table literals subject to a type cast (<a href="https://github.com/Benjamin-Dobell/IntelliJ-Luanalysis/issues/14">#14</a>)</li>
        <li>Static analysis now correctly handles use of parentheses to restrict multiple return values to just the first value.</li>
        <li>Fixed handling of iterators.</li>
        <li>Improved formatting/consistency of complex types displayed in the UI.</li>
        <li><em>function</em> type is now treated as returning <em>any...</em></li>
        <li>Fixed use of <em>@overload</em> in <em>@class</em> definitions that do not proceed a variable declaration/assignment.</li>
        <li>Smarter union behavior that eliminates duplicate/covariant types from the union. This tends to result in much simple error message.</li>
        <li>Fixed handling of some situations where table literals ought to be interpreted as arrays, but were not.</li>
    </ul>
    <strong>1.1.0</strong>
    <ul>
        <li>Ctrl/Cmd + Click ("Go To") on a string literal argument of a require("file") now takes you to the return value of the referenced file, rather than simply opening the file.<li>
        <li>Fixed type resolution of require("file") expressions, where the referenced file has no return statements.</li>
        <li>Added/fixed support for negative number literal types.</li>
        <li>Type inference will now handle unary minus (negate) expressions, where the operand is a number literal. String literals representing values that Lua will <em>silently coerce</em> to a number are also handled.</li>
    </ul>
    <strong>1.0.3</strong>
    <ul>
        <li>Ensured "Return type 'void' specified but no return values found" annotation is no longer raised for functions annotated as ---@return void.</li>
    </ul>
    <strong>1.0.2</strong>
    <ul>
        <li>Same as 1.0.1, but not constrained to IntelliJ 201 (2020.1).</li>
    </ul>
    <strong>1.0.1</strong>
    <ul>
        <li>Replaced duplicate class inspection with duplicate type inspection. Class/alias name collisions are now reported.</li>
        <li>Despite the Lua manual indicating otherwise, bit32 is present in Lua 5.3, added it.</li>
        <li>Ensured arrays are not covariant of shapes representing tuples.</li>
    </ul>
    <strong>1.0.0</strong>
    Initial release
    <ul>
        <li>Derived from EmmyLua 1.3.3</li>
        <li>A heap of static analysis improvements over EmmyLua 1.3.3</li>
    </ul>
    ]]>
    </change-notes>
    <idea-version since-build="203.3645.34"/>
    <xi:include href="luanalysis-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
    <depends optional="true" config-file="luanalysis-project.xml">com.intellij.java</depends>
</idea-plugin>
